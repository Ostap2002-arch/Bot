import asyncio

import pandas as pd
import psutil
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message

from app.mother_data import GetCoins
from app.queries.orm import ge_and_count_important_level

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç")],  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
        [KeyboardButton(text="–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∏—Ö –º–æ–Ω–µ—Ç")],  # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞")]
    ],
    resize_keyboard=True  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
)

dp = Dispatcher()


@dp.message(F.text == "–°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç")
async def handle_hello(message: Message):
    answer = await GetCoins.get_coins()
    answer = '\n'.join(map(lambda x: x.symbol, answer))
    await message.answer(f"–°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç \n {answer}", reply_markup=keyboard)


@dp.message(F.text == "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∏—Ö –º–æ–Ω–µ—Ç")
async def handle_hello(message: Message):
    answer = await ge_and_count_important_level()
    df = pd.DataFrame(columns=['id', 'time_frame', 'coin', 'count_level'], data=answer)
    answer = df[['coin', 'time_frame', 'count_level']]
    await message.answer(f"–°–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π \n {answer}", reply_markup=keyboard)


@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞")
async def send_bot_stats(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
    process = psutil.Process()

    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ asyncio
    tasks = [t for t in asyncio.all_tasks() if not t.done()]

    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    cpu_percent = psutil.cpu_percent()
    memory_info = psutil.virtual_memory()

    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    stats_message = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n"
        f"‚Ä¢ <b>–ó–∞–¥–∞—á–∏:</b> {len(tasks)} –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
        f"‚Ä¢ <b>CPU:</b> {cpu_percent}%\n"
        f"‚Ä¢ <b>–ü–∞–º—è—Ç—å:</b> {memory_info.used / 1024 / 1024:.2f} MB / {memory_info.total / 1024 / 1024:.2f} MB\n"
        f"‚Ä¢ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏:</b> {memory_info.percent}%\n"
        f"‚Ä¢ <b>–ü–∞–º—è—Ç—å –±–æ—Ç–∞:</b> {process.memory_info().rss / 1024 / 1024:.2f} MB"
    )

    await message.answer(stats_message, parse_mode="HTML")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def start_bot(bot: Bot):
    await dp.start_polling(bot)
